This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by rma (sequential) configure 0.3, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ ./configure 

## --------- ##
## Platform. ##
## --------- ##

hostname = rfdavid
uname -m = x86_64
uname -r = 5.15.0-101-generic
uname -s = Linux
uname -v = #111~20.04.1-Ubuntu SMP Mon Mar 11 15:44:43 UTC 2024

/usr/bin/uname -p = x86_64
/bin/uname -X     = unknown

/bin/arch              = x86_64
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /home/rfdavid/.rvm/gems/ruby-3.1.2/bin
PATH: /home/rfdavid/.rvm/gems/ruby-3.1.2@global/bin
PATH: /home/rfdavid/.rvm/rubies/ruby-3.1.2/bin
PATH: /home/rfdavid/.local/bin
PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin
PATH: /usr/games
PATH: /usr/local/games
PATH: /snap/bin
PATH: /home/rfdavid/.rvm/bin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2062: checking for clang
configure:2078: found /usr/bin/clang
configure:2089: result: clang
configure:2120: checking for C compiler version
configure:2129: clang --version >&5
clang version 10.0.0-4ubuntu1 
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
configure:2140: $? = 0
configure:2129: clang -v >&5
clang version 10.0.0-4ubuntu1 
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/10
Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/11
Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/8
Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/9
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/10
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11
... rest of stderr output deleted ...
configure:2140: $? = 0
configure:2129: clang -V >&5
clang: error: argument to '-V' is missing (expected 1 value)
clang: error: no input files
configure:2140: $? = 1
configure:2129: clang -qversion >&5
clang: error: unknown argument '-qversion'; did you mean '--version'?
clang: error: no input files
configure:2140: $? = 1
configure:2160: checking whether the C compiler works
configure:2182: clang    conftest.c  >&5
configure:2186: $? = 0
configure:2234: result: yes
configure:2237: checking for C compiler default output file name
configure:2239: result: a.out
configure:2245: checking for suffix of executables
configure:2252: clang -o conftest    conftest.c  >&5
configure:2256: $? = 0
configure:2278: result: 
configure:2300: checking whether we are cross compiling
configure:2308: clang -o conftest    conftest.c  >&5
configure:2312: $? = 0
configure:2319: ./conftest
configure:2323: $? = 0
configure:2311: result: no
configure:2316: checking for suffix of object files
configure:2338: clang -c   conftest.c >&5
configure:2342: $? = 0
configure:2363: result: o
configure:2367: checking whether we are using the GNU C compiler
configure:2386: clang -c   conftest.c >&5
configure:2386: $? = 0
configure:2395: result: yes
configure:2404: checking whether clang accepts -g
configure:2424: clang -c -g  conftest.c >&5
configure:2424: $? = 0
configure:2465: result: yes
configure:2482: checking for clang option to accept ISO C89
configure:2545: clang  -c -g -O2  conftest.c >&5
configure:2545: $? = 0
configure:2558: result: none needed
configure:2636: checking for clang++
configure:2652: found /usr/bin/clang++
configure:2663: result: clang++
configure:2690: checking for C++ compiler version
configure:2699: clang++ --version >&5
clang version 10.0.0-4ubuntu1 
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
configure:2710: $? = 0
configure:2699: clang++ -v >&5
clang version 10.0.0-4ubuntu1 
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/10
Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/11
Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/8
Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/9
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/10
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11
... rest of stderr output deleted ...
configure:2710: $? = 0
configure:2699: clang++ -V >&5
clang: error: argument to '-V' is missing (expected 1 value)
clang: error: no input files
configure:2710: $? = 1
configure:2699: clang++ -qversion >&5
clang: error: unknown argument '-qversion'; did you mean '--version'?
clang: error: no input files
configure:2710: $? = 1
configure:2714: checking whether we are using the GNU C++ compiler
configure:2733: clang++ -c   conftest.cpp >&5
configure:2733: $? = 0
configure:2742: result: yes
configure:2751: checking whether clang++ accepts -g
configure:2771: clang++ -c -g  conftest.cpp >&5
configure:2771: $? = 0
configure:2812: result: yes
configure:2844: checking whether clang++ supports C++17 features by default
configure:3660: clang++ -c   conftest.cpp >&5
conftest.cpp:425:2: error: "This is not a C++17 compiler"
#error "This is not a C++17 compiler"
 ^
1 error generated.
configure:3660: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "rma (sequential)"
| #define PACKAGE_TARNAME "rma--sequential-"
| #define PACKAGE_VERSION "0.3"
| #define PACKAGE_STRING "rma (sequential) 0.3"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++14, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201402L
| 
| #error "This is not a C++14 compiler"
| 
| #else
| 
| namespace cxx14
| {
| 
|   namespace test_polymorphic_lambdas
|   {
| 
|     int
|     test()
|     {
|       const auto lambda = [](auto&&... args){
|         const auto istiny = [](auto x){
|           return (sizeof(x) == 1UL) ? 1 : 0;
|         };
|         const int aretiny[] = { istiny(args)... };
|         return aretiny[0];
|       };
|       return lambda(1, 1L, 1.0f, '1');
|     }
| 
|   }
| 
|   namespace test_binary_literals
|   {
| 
|     constexpr auto ivii = 0b0000000000101010;
|     static_assert(ivii == 42, "wrong value");
| 
|   }
| 
|   namespace test_generalized_constexpr
|   {
| 
|     template < typename CharT >
|     constexpr unsigned long
|     strlen_c(const CharT *const s) noexcept
|     {
|       auto length = 0UL;
|       for (auto p = s; *p; ++p)
|         ++length;
|       return length;
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("x") == 1UL, "");
|     static_assert(strlen_c("test") == 4UL, "");
|     static_assert(strlen_c("another\0test") == 7UL, "");
| 
|   }
| 
|   namespace test_lambda_init_capture
|   {
| 
|     int
|     test()
|     {
|       auto x = 0;
|       const auto lambda1 = [a = x](int b){ return a + b; };
|       const auto lambda2 = [a = lambda1(x)](){ return a; };
|       return lambda2();
|     }
| 
|   }
| 
|   namespace test_digit_separators
|   {
| 
|     constexpr auto ten_million = 100'000'000;
|     static_assert(ten_million == 100000000, "");
| 
|   }
| 
|   namespace test_return_type_deduction
|   {
| 
|     auto f(int& x) { return x; }
|     decltype(auto) g(int& x) { return x; }
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static constexpr auto value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static constexpr auto value = true;
|     };
| 
|     int
|     test()
|     {
|       auto x = 0;
|       static_assert(is_same<int, decltype(f(x))>::value, "");
|       static_assert(is_same<int&, decltype(g(x))>::value, "");
|       return x;
|     }
| 
|   }
| 
| }  // namespace cxx14
| 
| #endif  // __cplusplus >= 201402L
| 
| 
| 
| 
| // If the compiler admits that it is not ready for C++17, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus <= 201402L
| 
| #error "This is not a C++17 compiler"
| 
| #else
| 
| #if defined(__clang__)
|   #define REALLY_CLANG
| #else
|   #if defined(__GNUC__)
|     #define REALLY_GCC
|   #endif
| #endif
| 
| #include <initializer_list>
| #include <utility>
| #include <type_traits>
| 
| namespace cxx17
| {
| 
| #if !defined(REALLY_CLANG)
|   namespace test_constexpr_lambdas
|   {
| 
|     // TODO: test it with clang++ from git
| 
|     constexpr int foo = [](){return 42;}();
| 
|   }
| #endif // !defined(REALLY_CLANG)
| 
|   namespace test::nested_namespace::definitions
|   {
| 
|   }
| 
|   namespace test_fold_expression
|   {
| 
|     template<typename... Args>
|     int multiply(Args... args)
|     {
|       return (args * ... * 1);
|     }
| 
|     template<typename... Args>
|     bool all(Args... args)
|     {
|       return (args && ...);
|     }
| 
|   }
| 
|   namespace test_extended_static_assert
|   {
| 
|     static_assert (true);
| 
|   }
| 
|   namespace test_auto_brace_init_list
|   {
| 
|     auto foo = {5};
|     auto bar {5};
| 
|     static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);
|     static_assert(std::is_same<int, decltype(bar)>::value);
|   }
| 
|   namespace test_typename_in_template_template_parameter
|   {
| 
|     template<template<typename> typename X> struct D;
| 
|   }
| 
|   namespace test_fallthrough_nodiscard_maybe_unused_attributes
|   {
| 
|     int f1()
|     {
|       return 42;
|     }
| 
|     [[nodiscard]] int f2()
|     {
|       [[maybe_unused]] auto unused = f1();
| 
|       switch (f1())
|       {
|       case 17:
|         f1();
|         [[fallthrough]];
|       case 42:
|         f1();
|       }
|       return f1();
|     }
| 
|   }
| 
|   namespace test_extended_aggregate_initialization
|   {
| 
|     struct base1
|     {
|       int b1, b2 = 42;
|     };
| 
|     struct base2
|     {
|       base2() {
|         b3 = 42;
|       }
|       int b3;
|     };
| 
|     struct derived : base1, base2
|     {
|         int d;
|     };
| 
|     derived d1 {{1, 2}, {}, 4};  // full initialization
|     derived d2 {{}, {}, 4};      // value-initialized bases
| 
|   }
| 
|   namespace test_general_range_based_for_loop
|   {
| 
|     struct iter
|     {
|       int i;
| 
|       int& operator* ()
|       {
|         return i;
|       }
| 
|       const int& operator* () const
|       {
|         return i;
|       }
| 
|       iter& operator++()
|       {
|         ++i;
|         return *this;
|       }
|     };
| 
|     struct sentinel
|     {
|       int i;
|     };
| 
|     bool operator== (const iter& i, const sentinel& s)
|     {
|       return i.i == s.i;
|     }
| 
|     bool operator!= (const iter& i, const sentinel& s)
|     {
|       return !(i == s);
|     }
| 
|     struct range
|     {
|       iter begin() const
|       {
|         return {0};
|       }
| 
|       sentinel end() const
|       {
|         return {5};
|       }
|     };
| 
|     void f()
|     {
|       range r {};
| 
|       for (auto i : r)
|       {
|         [[maybe_unused]] auto v = i;
|       }
|     }
| 
|   }
| 
|   namespace test_lambda_capture_asterisk_this_by_value
|   {
| 
|     struct t
|     {
|       int i;
|       int foo()
|       {
|         return [*this]()
|         {
|           return i;
|         }();
|       }
|     };
| 
|   }
| 
|   namespace test_enum_class_construction
|   {
| 
|     enum class byte : unsigned char
|     {};
| 
|     byte foo {42};
| 
|   }
| 
|   namespace test_constexpr_if
|   {
| 
|     template <bool cond>
|     int f ()
|     {
|       if constexpr(cond)
|       {
|         return 13;
|       }
|       else
|       {
|         return 42;
|       }
|     }
| 
|   }
| 
|   namespace test_selection_statement_with_initializer
|   {
| 
|     int f()
|     {
|       return 13;
|     }
| 
|     int f2()
|     {
|       if (auto i = f(); i > 0)
|       {
|         return 3;
|       }
| 
|       switch (auto i = f(); i + 4)
|       {
|       case 17:
|         return 2;
| 
|       default:
|         return 1;
|       }
|     }
| 
|   }
| 
| #if !defined(REALLY_CLANG)
|   namespace test_template_argument_deduction_for_class_templates
|   {
| 
|     // TODO: test it with clang++ from git
| 
|     template <typename T1, typename T2>
|     struct pair
|     {
|       pair (T1 p1, T2 p2)
|         : m1 {p1},
|           m2 {p2}
|       {}
| 
|       T1 m1;
|       T2 m2;
|     };
| 
|     void f()
|     {
|       [[maybe_unused]] auto p = pair{13, 42u};
|     }
| 
|   }
| #endif // !defined(REALLY_CLANG)
| 
|   namespace test_non_type_auto_template_parameters
|   {
| 
|     template <auto n>
|     struct B
|     {};
| 
|     B<5> b1;
|     B<'a'> b2;
| 
|   }
| 
| #if !defined(REALLY_CLANG)
|   namespace test_structured_bindings
|   {
| 
|     // TODO: test it with clang++ from git
| 
|     int arr[2] = { 1, 2 };
|     std::pair<int, int> pr = { 1, 2 };
| 
|     auto f1() -> int(&)[2]
|     {
|       return arr;
|     }
| 
|     auto f2() -> std::pair<int, int>&
|     {
|       return pr;
|     }
| 
|     struct S
|     {
|       int x1 : 2;
|       volatile double y1;
|     };
| 
|     S f3()
|     {
|       return {};
|     }
| 
|     auto [ x1, y1 ] = f1();
|     auto& [ xr1, yr1 ] = f1();
|     auto [ x2, y2 ] = f2();
|     auto& [ xr2, yr2 ] = f2();
|     const auto [ x3, y3 ] = f3();
| 
|   }
| #endif // !defined(REALLY_CLANG)
| 
| #if !defined(REALLY_CLANG)
|   namespace test_exception_spec_type_system
|   {
| 
|     // TODO: test it with clang++ from git
| 
|     struct Good {};
|     struct Bad {};
| 
|     void g1() noexcept;
|     void g2();
| 
|     template<typename T>
|     Bad
|     f(T*, T*);
| 
|     template<typename T1, typename T2>
|     Good
|     f(T1*, T2*);
| 
|     static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);
| 
|   }
| #endif // !defined(REALLY_CLANG)
| 
|   namespace test_inline_variables
|   {
| 
|     template<class T> void f(T)
|     {}
| 
|     template<class T> inline T g(T)
|     {
|       return T{};
|     }
| 
|     template<> inline void f<>(int)
|     {}
| 
|     template<> int g<>(int)
|     {
|       return 5;
|     }
| 
|   }
| 
| }  // namespace cxx17
| 
| #endif  // __cplusplus <= 201402L
| 
| 
| 
configure:3667: result: no
configure:3677: checking whether clang++ supports C++17 features with -std=gnu++17
configure:4495: clang++ -std=gnu++17 -c   conftest.cpp >&5
configure:4495: $? = 0
configure:4504: result: yes
configure:5386: WARNING: C++17 is not yet standardized, so the checks may change in incompatible ways anytime
configure:5610: checking for library containing atomic_signal_fence
configure:5641: clang++ -std=gnu++17 -o conftest    conftest.cpp  >&5
/usr/bin/ld: /tmp/conftest-431840.o: in function `main':
conftest.cpp:(.text+0x10): undefined reference to `atomic_signal_fence'
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:5641: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "rma (sequential)"
| #define PACKAGE_TARNAME "rma--sequential-"
| #define PACKAGE_VERSION "0.3"
| #define PACKAGE_STRING "rma (sequential) 0.3"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_CXX17 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char atomic_signal_fence ();
| int
| main ()
| {
| return atomic_signal_fence ();
|   ;
|   return 0;
| }
configure:5641: clang++ -std=gnu++17 -o conftest    conftest.cpp -latomic   >&5
configure:5641: $? = 0
configure:5658: result: -latomic
configure:5671: checking for library containing pthread_create
configure:5702: clang++ -std=gnu++17 -o conftest    conftest.cpp -latomic  >&5
/usr/bin/ld: /tmp/conftest-1a3032.o: undefined reference to symbol 'pthread_create@@GLIBC_2.2.5'
/usr/bin/ld: /lib/x86_64-linux-gnu/libpthread.so.0: error adding symbols: DSO missing from command line
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:5702: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "rma (sequential)"
| #define PACKAGE_TARNAME "rma--sequential-"
| #define PACKAGE_VERSION "0.3"
| #define PACKAGE_STRING "rma (sequential) 0.3"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_CXX17 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char pthread_create ();
| int
| main ()
| {
| return pthread_create ();
|   ;
|   return 0;
| }
configure:5702: clang++ -std=gnu++17 -o conftest    conftest.cpp -lpthread  -latomic  >&5
configure:5702: $? = 0
configure:5719: result: -lpthread
configure:5736: checking for numaif.h
configure:5736: clang++ -std=gnu++17 -c   conftest.cpp >&5
conftest.cpp:12:10: fatal error: 'numaif.h' file not found
#include <numaif.h>
         ^~~~~~~~~~
1 error generated.
configure:5736: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "rma (sequential)"
| #define PACKAGE_TARNAME "rma--sequential-"
| #define PACKAGE_VERSION "0.3"
| #define PACKAGE_STRING "rma (sequential) 0.3"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_CXX17 1
| /* end confdefs.h.  */
|  /* avoid default includes */
| 
| #include <numaif.h>
configure:5736: result: no
configure:5814: WARNING: libnuma support disabled...
configure:5823: checking for papi.h
configure:5823: clang++ -std=gnu++17 -c   conftest.cpp >&5
conftest.cpp:12:10: fatal error: 'papi.h' file not found
#include <papi.h>
         ^~~~~~~~
1 error generated.
configure:5823: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "rma (sequential)"
| #define PACKAGE_TARNAME "rma--sequential-"
| #define PACKAGE_VERSION "0.3"
| #define PACKAGE_STRING "rma (sequential) 0.3"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_CXX17 1
| /* end confdefs.h.  */
|  /* avoid default includes */
| 
| #include <papi.h>
configure:5823: result: no
configure:5901: WARNING: libpapi support disabled...
configure:5908: checking for library containing dlopen
configure:5939: clang++ -std=gnu++17 -o conftest    conftest.cpp -lpthread -latomic  >&5
/usr/bin/ld: /tmp/conftest-8b8664.o: in function `main':
conftest.cpp:(.text+0x10): undefined reference to `dlopen'
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:5939: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "rma (sequential)"
| #define PACKAGE_TARNAME "rma--sequential-"
| #define PACKAGE_VERSION "0.3"
| #define PACKAGE_STRING "rma (sequential) 0.3"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_CXX17 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char dlopen ();
| int
| main ()
| {
| return dlopen ();
|   ;
|   return 0;
| }
configure:5939: clang++ -std=gnu++17 -o conftest    conftest.cpp -ldl  -lpthread -latomic  >&5
configure:5939: $? = 0
configure:5956: result: -ldl
configure:5997: checking whether C compiler accepts -fno-limit-debug-info
configure:6016: clang -c  -g  -fno-limit-debug-info  conftest.c >&5
configure:6016: $? = 0
configure:6024: result: yes
configure:6032: checking whether C compiler accepts -fno-omit-frame-pointer
configure:6051: clang -c  -g -fno-limit-debug-info  -fno-omit-frame-pointer  conftest.c >&5
configure:6051: $? = 0
configure:6059: result: yes
configure:6090: checking whether C++ compiler accepts -fno-limit-debug-info
configure:6109: clang++ -std=gnu++17 -c  -g  -fno-limit-debug-info  conftest.cpp >&5
configure:6109: $? = 0
configure:6117: result: yes
configure:6125: checking whether C++ compiler accepts -fno-omit-frame-pointer
configure:6144: clang++ -std=gnu++17 -c  -g -fno-limit-debug-info  -fno-omit-frame-pointer  conftest.cpp >&5
configure:6144: $? = 0
configure:6152: result: yes
configure:6251: checking whether C compiler accepts -Wno-sign-compare
configure:6270: clang -c  -g -fno-limit-debug-info -fno-omit-frame-pointer -Wall  -Wno-sign-compare  conftest.c >&5
configure:6270: $? = 0
configure:6278: result: yes
configure:6298: checking whether C++ compiler accepts -Wno-sign-compare
configure:6317: clang++ -std=gnu++17 -c  -g -fno-limit-debug-info -fno-omit-frame-pointer -Wall  -Wno-sign-compare  conftest.cpp >&5
configure:6317: $? = 0
configure:6325: result: yes
configure:6333: checking whether C++ compiler accepts -Wno-overloaded-virtual
configure:6352: clang++ -std=gnu++17 -c  -g -fno-limit-debug-info -fno-omit-frame-pointer -Wall -Wno-sign-compare  -Wno-overloaded-virtual  conftest.cpp >&5
configure:6352: $? = 0
configure:6360: result: yes
configure:6682: checking whether clang++ -std=gnu++17 supports the libc++ replacement
configure:6705: clang++ -std=gnu++17 -o conftest  -g -fno-limit-debug-info -fno-omit-frame-pointer -Wall -Wno-sign-compare -Wno-overloaded-virtual -O0 -stdlib=libc++   conftest.cpp -ldl -lpthread -latomic  >&5
conftest.cpp:11:18: fatal error: 'iostream' file not found
        #include <iostream>
                 ^~~~~~~~~~
1 error generated.
configure:6705: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "rma (sequential)"
| #define PACKAGE_TARNAME "rma--sequential-"
| #define PACKAGE_VERSION "0.3"
| #define PACKAGE_STRING "rma (sequential) 0.3"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define HAVE_CXX17 1
| /* end confdefs.h.  */
| 
|         #include <iostream>
|         #include <string>
| 
|         using namespace std;
| 
|         int main(int argc, const char* argv[]){
|           cout << "yes" << endl;
|           return 0;
|         }
| 
configure:6708: result: no
configure:6730: checking for ./third-party/pma_dfr_inria/pma.h
configure:6744: result: no
configure:7013: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by rma (sequential) config.status 0.3, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on rfdavid

config.status:724: creating Makefile

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_c_compiler_gnu=yes
ac_cv_cxx_compiler_gnu=yes
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CXXFLAGS_set=
ac_cv_env_CXXFLAGS_value=
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_file___third_party_pma_dfr_inria_pma_h=no
ac_cv_header_numaif_h=no
ac_cv_header_papi_h=no
ac_cv_objext=o
ac_cv_prog_ac_ct_CC=clang
ac_cv_prog_ac_ct_CXX=clang++
ac_cv_prog_cc_c89=
ac_cv_prog_cc_g=yes
ac_cv_prog_cxx_g=yes
ac_cv_search_atomic_signal_fence=-latomic
ac_cv_search_dlopen=-ldl
ac_cv_search_pthread_create=-lpthread
ax_cv_check_cflags___Wno_sign_compare=yes
ax_cv_check_cflags___fno_limit_debug_info=yes
ax_cv_check_cflags___fno_omit_frame_pointer=yes
ax_cv_check_cxxflags___Wno_overloaded_virtual=yes
ax_cv_check_cxxflags___Wno_sign_compare=yes
ax_cv_check_cxxflags___fno_limit_debug_info=yes
ax_cv_check_cxxflags___fno_omit_frame_pointer=yes
ax_cv_cxx_compile_cxx17=no
ax_cv_cxx_compile_cxx17__std_gnupp17=yes
my_cv_check_stdlib_libcxx=no

## ----------------- ##
## Output variables. ##
## ----------------- ##

CC='clang'
CFLAGS='-g -fno-limit-debug-info -fno-omit-frame-pointer -Wall -Wno-sign-compare -O0'
CPPFLAGS=''
CXX='clang++ -std=gnu++17'
CXXFLAGS='-g -fno-limit-debug-info -fno-omit-frame-pointer -Wall -Wno-sign-compare -Wno-overloaded-virtual -O0'
DEFS='-DPACKAGE_NAME=\"rma\ \(sequential\)\" -DPACKAGE_TARNAME=\"rma--sequential-\" -DPACKAGE_VERSION=\"0.3\" -DPACKAGE_STRING=\"rma\ \(sequential\)\ 0.3\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DHAVE_CXX17=1'
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EXEEXT=''
EXTRA_CFLAGS=''
EXTRA_CPPFLAGS=''
EXTRA_CXXFLAGS=''
HAVE_CXX17='1'
LDFLAGS=''
LIBOBJS=''
LIBS='-ldl -lpthread -latomic  '
LTLIBOBJS=''
OBJEXT='o'
PACKAGE_BUGREPORT=''
PACKAGE_NAME='rma (sequential)'
PACKAGE_STRING='rma (sequential) 0.3'
PACKAGE_TARNAME='rma--sequential-'
PACKAGE_URL=''
PACKAGE_VERSION='0.3'
PATH_SEPARATOR=':'
SHELL='/bin/bash'
ac_ct_CC='clang'
ac_ct_CXX='clang++'
bindir='${exec_prefix}/bin'
build_alias=''
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host_alias=''
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr/local'
program_transform_name='s,x,x,'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
subdirs_extra=''
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "rma (sequential)"
#define PACKAGE_TARNAME "rma--sequential-"
#define PACKAGE_VERSION "0.3"
#define PACKAGE_STRING "rma (sequential) 0.3"
#define PACKAGE_BUGREPORT ""
#define PACKAGE_URL ""
#define HAVE_CXX17 1

configure: exit 0
